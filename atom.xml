<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Network-Tech]]></title>
  <subtitle><![CDATA[A fast, simple & powerful blog framework powered by Node.js.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://hexo.io/"/>
  <updated>2015-12-14T14:47:29.690Z</updated>
  <id>https://hexo.io/</id>
  
  <author>
    <name><![CDATA[wwyyzz]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Chapter 1. 介绍]]></title>
    <link href="https://hexo.io/news/2015/12/14/manual-cn-CH1/"/>
    <id>https://hexo.io/news/2015/12/14/manual-cn-CH1/</id>
    <published>2015-12-14T14:47:29.690Z</published>
    <updated>2015-12-14T14:47:29.690Z</updated>
    <content type="html"><![CDATA[<h3 id="1-1-_Wireshark_u662F_u4EC0_u4E48_3F"><a href="#1-1-_Wireshark_u662F_u4EC0_u4E48_3F" class="headerlink" title="1.1. Wireshark是什么?"></a>1.1. Wireshark是什么?</h3><p>Wireshark是网络数据包分析软件。网络数据包分析器将尝试捕获网络数据包，并试图尽可能详细的显示数据包的数据。</p>
<p>您可以认为一个网络包分析软件是一个用来检查网线内部发生了什么的测量设备，就像电工使用电压表来检查电缆内部发生了什么一样（当然，但在一个更高的水平 ）。</p>
<p>在过去，这样的工具要么非常昂贵的，专用的，或两者兼而有之。然而，随着Wireshark的出现，这一切都改变。</p>
<p>Wireshark也许是目前最好的开源数据包分析软件。</p>
<h4 id="1-1-1-__u4E00_u4E9B_u9884_u671F_u76EE_u7684"><a href="#1-1-1-__u4E00_u4E9B_u9884_u671F_u76EE_u7684" class="headerlink" title="1.1.1. 一些预期目的"></a>1.1.1. 一些预期目的</h4><p>下面是一些使用Wireshark的例子：</p>
<ul>
<li>网络管理员用它来​​解决网络问题</li>
<li>网络安全工程师用它来​​检查安全问题</li>
<li>开发人员可以使用它来​​调试协议实现</li>
<li>人们用它来​​学习网络协议内部</li>
</ul>
<p>除了这些例子之外Wireshark在许多其他情况下也很有帮助。</p>
<h4 id="1-1-2-__u7279_u6027"><a href="#1-1-2-__u7279_u6027" class="headerlink" title="1.1.2. 特性"></a>1.1.2. 特性</h4><p>下面是Wireshark众多特性中的一些：</p>
<ul>
<li></li>
<li>适用于 UNIX 和 Windows。</li>
<li>从网络接口捕获实时分组数据。</li>
<li>打开包含使用tcpdump / WinDump、Wireshark以及其他一些抓包程序文件捕获的数据包。</li>
<li>从包含hex dumps分组数据的文本文件中导入数据包。</li>
<li>显示数据包的非常详细的协议信息 。</li>
<li>保存捕获数据包。</li>
<li>以多种捕获文件格式导出部分或全部数据包。</li>
<li>以多种规则来过滤数据包。</li>
<li>以多种规则来搜索数据包。</li>
<li>基于筛选器来上色数据包。</li>
<li>创建各种统计数据。</li>
<li>…还有更多！</li>
</ul>
<p>但是，要真正欣赏它的力量，您必须开始使用它。</p>
<p>图 1.1, “Wireshark 的捕获数据包，可以让您检查他们的内容” 显示Wireshark已经捕获的一些数据包，并等待着您</p>
<p><strong>图 1.1. Wireshark的捕获数据包，可以让您检查它们的内容。</strong></p>
<img src="/news/2015/12/14/manual-cn-CH1/ws-main.png" alt="ws-main.png" title="">
<h4 id="1-1-3-__u5728_u591A_u79CD_u7F51_u7EDC_u4ECB_u8D28_u4E2D_u6355_u83B7_u62A5_u6587"><a href="#1-1-3-__u5728_u591A_u79CD_u7F51_u7EDC_u4ECB_u8D28_u4E2D_u6355_u83B7_u62A5_u6587" class="headerlink" title="1.1.3. 在多种网络介质中捕获报文"></a>1.1.3. 在多种网络介质中捕获报文</h4><p>Wireshark可以捕捉来自多种不同网络介质类型的流量-不用关注它的名字-包括无线LAN。所支持的媒介类型，取决于很多方面，如正在使用的操作系统。支持的媒介类型的说明在<a href="https://wiki.wireshark.org/CaptureSetup/NetworkMedia。" target="_blank" rel="external">https://wiki.wireshark.org/CaptureSetup/NetworkMedia。</a></p>
<h4 id="1-1-4-__u4ECE_u5176_u4ED6_u6355_u83B7_u8F6F_u4EF6_u5BFC_u5165_u6587_u4EF6"><a href="#1-1-4-__u4ECE_u5176_u4ED6_u6355_u83B7_u8F6F_u4EF6_u5BFC_u5165_u6587_u4EF6" class="headerlink" title="1.1.4. 从其他捕获软件导入文件"></a>1.1.4. 从其他捕获软件导入文件</h4><p>Wireshark可以打开大量的其他捕获程序捕获的数据包。对于输入格式列表，请参阅  5.2.2节, “输入文件格式”。</p>
<h4 id="1-1-5-__u4E3A_u5176_u4ED6_u6355_u83B7_u8F6F_u4EF6_u5BFC_u51FA_u6587_u4EF6"><a href="#1-1-5-__u4E3A_u5176_u4ED6_u6355_u83B7_u8F6F_u4EF6_u5BFC_u51FA_u6587_u4EF6" class="headerlink" title="1.1.5. 为其他捕获软件导出文件"></a>1.1.5. 为其他捕获软件导出文件</h4><p>Wireshark可以保存数据包为大量的其他捕获程序捕获的数据包格式。对于输出格式列表，请参阅  5.3.2节, “输出文件格式”。</p>
<h4 id="1-1-6-__u591A_u534F_u8BAE_u89E3_u7801_u5668"><a href="#1-1-6-__u591A_u534F_u8BAE_u89E3_u7801_u5668" class="headerlink" title="1.1.6. 多协议解码器"></a>1.1.6. 多协议解码器</h4><p>支持众多协议的协议解码器（或解析器，他们在Wireshark中的叫法）：请参阅 附录 C，协议和协议字段。</p>
<h4 id="1-1-7-__u5F00_u6E90_u8F6F_u4EF6"><a href="#1-1-7-__u5F00_u6E90_u8F6F_u4EF6" class="headerlink" title="1.1.7. 开源软件"></a>1.1.7. 开源软件</h4><p>Wireshark是开源软件项目，使用 GNU通用公共授权 (GPL)发布。您可以自由地使用Wireshark在任意数量的计算机上，而不用担心许可证或手续费等。此外，在GPL许可下的所有源代码是免费的。正因为如此，人们给Wireshark添加新的协议非常容易，无论是作为插件或内置的源代码，人们也经常这么做！</p>
<h4 id="1-1-8-_Wireshark__u4E0D_u662F_u4EC0_u4E48"><a href="#1-1-8-_Wireshark__u4E0D_u662F_u4EC0_u4E48" class="headerlink" title="1.1.8. Wireshark 不是什么"></a>1.1.8. Wireshark 不是什么</h4><p>这里有一些事情Wireshark不能提供：</p>
<p>Wireshark不是一个入侵检测系统。当有人在您的网络中做一些未经允许的奇怪的事情时，它不会警告您。但是，如果奇怪的事情发生了，Wireshark可以帮助您找出到底发生了什么。<br>Wireshark将不能操纵网络，它只会“测量”网络。Wireshark不能在网络上发送数据包或做其他一些动作（除了名称解析，但也可以禁用解析）。</p>
<h3 id="1-2-__u7CFB_u7EDF_u8981_u6C42"><a href="#1-2-__u7CFB_u7EDF_u8981_u6C42" class="headerlink" title="1.2. 系统要求"></a>1.2. 系统要求</h3><p>Wireshark需要资源的数量取决于您的环境和您待分析的捕获文件大小。以下的值对于中小大小的不超过几百兆的捕获文件是合适的。更大的捕获文件将需要更多的内存和磁盘空间。</p>
<p>[Note]    繁忙的网络意味着大量捕获<br>一个繁忙的网络工作可以很容易地产生巨大的捕获文件。捕捉千兆，甚至100兆的网络可以在很短的时间内生产上百兆字节的捕获数据。一个快速的处理器，大量的内存和磁盘空间始终是一个好主意。</p>
<p>如果Wireshark的内存用完，会导致它崩溃。见 <a href="https://wiki.wireshark.org/KnownBugs/OutOfMemory" target="_blank" rel="external">https://wiki.wireshark.org/KnownBugs/OutOfMemory</a> 的细节和解决方法。</p>
<p>虽然Wireshark捕获报文使用独立的进程，他的主界面是单线程的，并没有从多核系统中获益。</p>
<h4 id="1-2-1-__u5FAE_u8F6F_Windows"><a href="#1-2-1-__u5FAE_u8F6F_Windows" class="headerlink" title="1.2.1. 微软 Windows"></a>1.2.1. 微软 Windows</h4><ul>
<li>Wireshark的当前版本应该支持任何仍然在扩展支持生命周期 的Windows版本。在写这篇文章的时候包括Windows 8，7，Vista，Server 2012，Server 2008 R2，Server 2008和Server 2003。</li>
<li>任何现代的 32-位 x86 or 64-位 AMD64/x86-64 处理器。</li>
<li>200 MB 可用内存。 更大的捕获文件需要更多的内存。</li>
<li>75 MB可用磁盘空间。捕获文件需要额外的磁盘空间。</li>
<li>1024×768（1280×1024或建议更高）分辨率，至少为16位色。8位色彩应该也能工作，但用户体验会下降。</li>
<li>支持的用于捕获的网卡<ul>
<li>以太网。Windows支持的任何卡应该工作。查看维基页面 以太网捕获和 卸载了解可能影响您的环境的问题。</li>
<li>Ethernet. Any card supported by Windows should work. 参见 the wiki pages on Ethernet capture and offloading for issues that may affect your environment.</li>
<li>802.11。参考 Wireshark wiki 页面.。没有特殊设备的话，捕获原始802.11信息可能很困难。</li>
<li>其他介质。参考 <a href="https://wiki.wireshark.org/CaptureSetup/NetworkMedia" target="_blank" rel="external">https://wiki.wireshark.org/CaptureSetup/NetworkMedia</a><br>不再对超出微软的扩展生命周期支持窗外的旧版本Windows提供支持。由于我们无法控制的情况，很难或不可能支持这些系统，如我们所依赖的第三方库或哪些仅出现在新版本Windows中的特性（如硬化安全或内存管理）。</li>
</ul>
</li>
</ul>
<p>Wireshark的1.10是最后一个正式支持Windows XP的版本分支。Wireshark的1.2是支持Windows 2000的最后分支，请参见 Wireshark 版本生命周期 页面了解详细信息。</p>
<h4 id="1-2-2-_UNIX_/_Linux"><a href="#1-2-2-_UNIX_/_Linux" class="headerlink" title="1.2.2. UNIX / Linux"></a>1.2.2. UNIX / Linux</h4><p>Wireshark目前可以运行在大多数UNIX平台。系统的要求可以对照上面列出的Windows值。</p>
<p>二进制软件包可用于大多数的Unices和Linux发行版，包括以下平台：</p>
<ul>
<li>Apple Mac OS X</li>
<li>Debian GNU/Linux</li>
<li>FreeBSD</li>
<li>Gentoo Linux</li>
<li>HP-UX</li>
<li>Mandriva Linux</li>
<li>NetBSD</li>
<li>OpenPKG</li>
<li>Red Hat Enterprise/Fedora Linux</li>
<li>Sun Solaris/i386</li>
<li>Sun Solaris/SPARC</li>
<li>Canonical Ubuntu</li>
</ul>
<p>如果一个二进制包不适用于您的平台，您可以下载源代码，并尝试编译它。请报告您的经验给 wireshark-dev[AT]wireshark.org.</p>
<h3 id="1-3-__u4ECE_u54EA_u91CC_u83B7_u53D6Wireshark"><a href="#1-3-__u4ECE_u54EA_u91CC_u83B7_u53D6Wireshark" class="headerlink" title="1.3. 从哪里获取Wireshark"></a>1.3. 从哪里获取Wireshark</h3><p>您可以从Wireshark的网站 <a href="https://www.wireshark.org/download.html" target="_blank" rel="external">https://www.wireshark.org/download.html</a>获取最新版本。下载页面会自动突出显示您的平台相应的下载，并指引您到最近的镜像。</p>
<p>新版本的Wireshark一般每一或两个月更新。</p>
<p>如果您想被通知新Wireshark的发布，您应该订阅Wireshark的Wireshark-通知邮件列表。您会发现更多的细节在  1.6.5节, “邮件列表”。</p>
<p>###1.4. Wireshark简史###</p>
<p>在1997年年底Gerald Combs需要一个工具用于跟踪网络问题，并希望更多地了解网络，所以他开始写Ethereal（Wireshark项目原来的名字）来解决这两个问题。</p>
<p>Ethereal在几次暂停开发后于1998年7月发布初始版本0.2.0。经过补丁修正，bug报告，鼓励的话开始出现，Ethereal开始走上成功之路。</p>
<p>此后不久Gilbert Ramirez 看到了它的潜力，并为他贡献了一个底层解析器。</p>
<p>在1998年10月盖伊·哈里斯正在寻找比TCPView的更好的东西，所以他开始了应用补丁和促进解剖，以空灵。</p>
<p>在1998年底Guy Harris ，正在讲授TCP / IP课程，看到了他对这些课程的潜力，并开始关注他，看它是否支持他所需要的协议。然而新的协议不是很容易地添加。于是，他开始贡献解析器和补丁。</p>
<p>自那时以来的为项目贡献的人的名单已经很长，几乎所有的人都从他们需要而Wireshark尚未支持的协议开始。因此，他们复制一个现有的解析器并将代码贡献回团队。</p>
<p>2006年该项目搬了家，并以一个新的名字重新出现：Wireshark。</p>
<p>2008年，经过十多年的发展，Wireshark的终于到了1.0版本。此版本是第一个被视为完整的，实现最小功能的版本。它的发布恰逢第一次Wireshark开发者和用户大会（被称为Sharkfest）。</p>
<h3 id="1-5-__u5F00_u53D1_u548C_u7EF4_u62A4Wireshark"><a href="#1-5-__u5F00_u53D1_u548C_u7EF4_u62A4Wireshark" class="headerlink" title="1.5. 开发和维护Wireshark"></a>1.5. 开发和维护Wireshark</h3><p>Wireshark最初由Gerald Combs开发。持续开发和维护Wireshark的是Wireshark团队，该团队是由修复bug和提供新功能的个人组成的松散团队处理。</p>
<p>同时也有大量的人为Wireshark贡献协议解析器，而且预计这将继续下去。您可以通过检查Wireshark的关于对话框来找到这些贡献代码人员的列表，或者在Wireshark网站的作者页面上也能找到。</p>
<p>Wireshark是一个开源软件项目，根据 GNU通用公共许可证（GPL）版本2来发布。所有的源代码根据GPL免费提供。欢迎您修改Wireshark来满足自己的需要，如果您贡献您的改进回Wireshark团队，将不胜感激。</p>
<p>您通过贡献您的改进回馈社会，将获得三大好处：</p>
<ol>
<li>其他人的因为您的贡献而得到帮助的人将非常感激他们，您就会知道您已经在以同样的Wireshark的开发者帮助人们的方式帮助他人。</li>
<li>Wireshark的开发者可能更多帮助您的提升，因为总有改进的余地。或者，他们可以在您的代码上实现更多高级的事情，这对自己也是非常有帮助的。</li>
<li>Wireshark的维护者和开发者同时会维护您的代码，当API变化或其他更改发生时同时进行修正，并且通常和Wireshark保持配合。所以，如果Wireshark更新了（这经常发生），您可以从该网站获取一个新版本并且您的更改已经包含在内，而无需额外的工作。</li>
</ol>
<p>Wireshark的源代码和一些平台的二进制文件包，都可以使用Wireshark的网站的下载页面： <a href="https://www.wireshark.org/download.html" target="_blank" rel="external">https://www.wireshark.org/download.html</a>。</p>
<h3 id="1-6-__u62A5_u544A_u95EE_u9898_u548C_u83B7_u5F97_u5E2E_u52A9"><a href="#1-6-__u62A5_u544A_u95EE_u9898_u548C_u83B7_u5F97_u5E2E_u52A9" class="headerlink" title="1.6. 报告问题和获得帮助"></a>1.6. 报告问题和获得帮助</h3><p>如果您在使用Wireshark时有问题或需要帮助，可能有几个地方您会感兴趣（当然除了本指南之外）。</p>
<h4 id="1-6-1-__u7F51_u7AD9"><a href="#1-6-1-__u7F51_u7AD9" class="headerlink" title="1.6.1. 网站"></a>1.6.1. 网站</h4><p>您会在Wireshark的主页 <a href="https://www.wireshark.org/" target="_blank" rel="external">https://www.wireshark.org/</a>上发现很多有用的信息。</p>
<h4 id="1-6-2-_Wiki"><a href="#1-6-2-_Wiki" class="headerlink" title="1.6.2. Wiki"></a>1.6.2. Wiki</h4><p>Wireshark Wiki  <a href="https://wiki.wireshark.org/" target="_blank" rel="external">https://wiki.wireshark.org/</a>提供了大量关于Wireshark和数据包捕获的信息。您会发现很多本用户指南没有涉及的信息。例如，解释如何在交换网络上进行捕获，不断努力建立协议参考以及更多内容。 </p>
<p>而最重要的，如果您想对一个特定的主题贡献自己的知识（可能是您非常熟悉的网络协议），您可以通过简单地使用Web浏览器来编辑维基页​​面。</p>
<h4 id="1-6-3-_Q_26amp_3BA__u7F51_u7AD9"><a href="#1-6-3-_Q_26amp_3BA__u7F51_u7AD9" class="headerlink" title="1.6.3. Q&amp;A 网站"></a>1.6.3. Q&amp;A 网站</h4><p>Wireshark Q&amp;A 网站 <a href="https://ask.wireshark.org/" target="_blank" rel="external">https://ask.wireshark.org/</a> 提供问题和答案的资源。您可以查找之前哪些问题被问过了，关于这个问题人们给出什么答案。答案是分级的，所以您可以很容易地挑选出最好的。如果您的问题还没有被讨论过，您可以自己发布一个。</p>
<h4 id="1-6-4-_FAQ"><a href="#1-6-4-_FAQ" class="headerlink" title="1.6.4. FAQ"></a>1.6.4. FAQ</h4><p>常见问题列表经常遇到的问题进行相应的解答。</p>
<p>[Note]    阅读 FAQ<br>在发送任何邮件到下面的邮件列表前，请务必阅读FAQ。它往往会回答您的任何问题。这将节省自己和别人了大量的时间。请记住，很多人都订阅了邮件列表。</p>
<p>您可以通过点击Wireshark的菜单项“ Help/Contents”并选择所示的对话框中的FAQ页面来找到FAQ。</p>
<p>在线版本在Wireshark的网站： <a href="https://www.wireshark.org/faq.html" target="_blank" rel="external">https://www.wireshark.org/faq.html</a>。您可能会喜欢这个在线版本，因为它通常更新更及时并且HTML格式更容易使用。</p>
<h4 id="1-6-5-__u90AE_u4EF6_u5217_u8868"><a href="#1-6-5-__u90AE_u4EF6_u5217_u8868" class="headerlink" title="1.6.5. 邮件列表"></a>1.6.5. 邮件列表</h4><p>有几个可用的特定Wireshark主题邮件列表：</p>
<p><em>wireshark-announce</em></p>
<p>这个邮件列表会告知您新的程序版本发布，它通常大约每4-8周出现一次。</p>
<p><em>wireshark-users</em></p>
<p>这个列表提供给Wireshark的用户。人们发送关于编译和使用Wireshark的问题，其他人（希望）提供答案。 </p>
<p><em>wireshark-dev</em></p>
<p>这个列表是提供给Wireshark的开发者。如果您想开发协议解析器，加入这个列表。<br>您可以分别从Wireshark网站上订阅这些列表： <a href="https://www.wireshark.org/lists/" target="_blank" rel="external">https://www.wireshark.org/lists/</a>。从那里，</p>
<p>您可以通过在相关列表的标题下点击 “订阅/取消/选项” 按钮项按钮来选择订阅哪些邮件列表。归档的链接也同时包含在该页面上。 </p>
<p>[Tip]    归档列表<br>您可以在归档列表中搜索，看看是否有人问过同样的问题，可能就能够获取答案。这样您就不必等到有人来回答您的问题。</p>
<h4 id="1-6-6-__u62A5_u544A_u95EE_u9898"><a href="#1-6-6-__u62A5_u544A_u95EE_u9898" class="headerlink" title="1.6.6. 报告问题"></a>1.6.6. 报告问题</h4><p>[Note]    注意<br>在报告任何问题前，请确保您已经安装了Wireshark的最新版本。</p>
<p>当向Wireshark报告问题时，请提供以下信息：</p>
<ol>
<li>Wireshark的版本号和与之相连的依赖库，如Qt或GLib。您可以从Wireshark的“关于”对话框或 wireshark -v命令来获取。</li>
<li>Wireshark运行平台的信息。</li>
<li>您的问题的详细描述。</li>
<li>如果您得到一个错误/警告消息，复制该消息的文本（如果有很多消息，需包含之前和之后几行），以便其他人发现出差错的地方。请不要给这样的信息：“在做x时，我得到一个警告”，因为这不会对去哪里查找问题提供帮助。</li>
</ol>
<p>[Note]    不要发送大文件<br>不要发送大文件（&gt; 500KB）到邮件列表。只需提示，进一步的数据可应要求提供。大文件只会惹恼了邮件列表上很多对您的问题不感兴趣的人。如果需要的话，您会被要求提供进一步的数据给真的可以帮助您的人。</p>
<p>[Warning]    不要发送机密信息！<br>如果您发送捕捉文件到邮件列表，要确保它们不包含任何敏感或机密信息，像密码或个人识别信息（PII）。</p>
<h4 id="1-6-7-_UNIX/Linux__u5E73_u53F0_u5D29_u6E83_u62A5_u544A"><a href="#1-6-7-_UNIX/Linux__u5E73_u53F0_u5D29_u6E83_u62A5_u544A" class="headerlink" title="1.6.7. UNIX/Linux 平台崩溃报告"></a>1.6.7. UNIX/Linux 平台崩溃报告</h4><p>在报告Wireshark崩溃的时候，如果能提供“报告问题”中提到的跟踪信息是非常有帮助的。</p>
<p>您可以在UNIX或Linux（注意反引号）上通过以下命令来获取跟踪信息：</p>
<pre><code>$ gdb `whereis wireshark | cut -f2 -d: | cut -d&apos; &apos; -f2` core &gt;&amp; backtrace.txt
backtrace
^D
</code></pre><p>如果您没有gdb可用，您必须检查您的操作系统的调试器。</p>
<p>邮件 backtrace.txt 给 <a href="wireshark-dev[AT]wireshark.org">wireshark-dev[AT]wireshark.org</a>。</p>
<h4 id="1-6-8-_Windows_u5E73_u53F0_u5D29_u6E83_u62A5_u544A"><a href="#1-6-8-_Windows_u5E73_u53F0_u5D29_u6E83_u62A5_u544A" class="headerlink" title="1.6.8. Windows平台崩溃报告"></a>1.6.8. Windows平台崩溃报告</h4><p>Windows发布版本不包含符号文件（.PDB），因为他们非常大。您可以单独在<a href="https://www.wireshark.org/download/win32/all-versions" target="_blank" rel="external">https://www.wireshark.org/download/win32/all-versions</a> 和 <a href="https://www.wireshark.org/download/win64/all-versions" target="_blank" rel="external">https://www.wireshark.org/download/win64/all-versions</a> 下载。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-1-_Wireshark_u662F_u4EC0_u4E48_3F"><a href="#1-1-_Wireshark_u662F_u4EC0_u4E48_3F" class="headerlink" title="1.1. Wireshark是什么?"></]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 2.8 Released]]></title>
    <link href="https://hexo.io/news/2015/12/14/2014-07-13-hexo-2-8-released/"/>
    <id>https://hexo.io/news/2015/12/14/2014-07-13-hexo-2-8-released/</id>
    <published>2015-12-14T14:27:08.710Z</published>
    <updated>2015-12-14T14:27:08.702Z</updated>
    <content type="html"><![CDATA[<p>Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can check <a href="https://github.com/hexojs/hexo/releases/tag/2.8.0" target="_blank" rel="external">detail</a> on GitHub.</p>
<h2 id="Faster_Processing_Speed"><a href="#Faster_Processing_Speed" class="headerlink" title="Faster Processing Speed"></a>Faster Processing Speed</h2><p>Before Hexo 2.8, all source files have to be processed each time you use Hexo. In Hexo 2.8, the entire database will be saved to <code>db.json</code> so Hexo don’t have to process all files again. Also, a new data type “<strong>skip</strong>“ was added for processors to detect whether a file was changed or not.</p>
<p>Generating was also changed in Hexo 2.8. You can check the elapsed time of each file in console now. However, I found multi-process generating didn’t affect generating speed a lot. Thus, <code>multi_thread</code> and <code>max_open_file</code> setting are deprecated in Hexo 2.8.</p>
<img src="/news/2015/12/14/2014-07-13-hexo-2-8-released/ws-main.png" alt="ws-main.png" title="">
<h2 id="Draft_Publish"><a href="#Draft_Publish" class="headerlink" title="Draft Publish"></a>Draft Publish</h2><p>You don’t have to enter full file name to publish a post anymore. Draft publish system is rewritten in Hexo 2.8. <code>new_post_name</code> setting will be applied until drafts are published. Besides, you can choose which layout to apply when publishing.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>A new API <code>post.publish</code> was added to help you publish drafts more easily.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.post.publish(&#123;slug: <span class="string">'hello-world'</span>, layout: <span class="string">'post'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, target</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Permalink"><a href="#Permalink" class="headerlink" title="Permalink"></a>Permalink</h2><p>File name and permalink now share a more universal variable system. Every variables in file name can also be read in permalink. Here’s a config for example:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">permalink: :type/:title/&#10;new_post_name: :type/:title.md</span><br></pre></td></tr></table></figure>
<p>When you create a post, the post will be saved to <code>source/_posts/test/Hello-World.md</code> and the URL will be <code>http://localhost:4000/test/Hello-World/</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"Hello World"</span> --type <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h2 id="Multi-language_Support"><a href="#Multi-language_Support" class="headerlink" title="Multi-language Support"></a>Multi-language Support</h2><p>With the new permalink introduced in the previous section, it’s much easier to create a multi-language site. For example:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">permalink: :lang/:title/&#10;new_post_name: :lang/:title.md</span><br></pre></td></tr></table></figure>
<p>Then you can create a post with <code>--lang</code> option:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"Hello World"</span> --lang en</span><br><span class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/en/Hello-World.md</span></span><br><span class="line"><span class="comment"># =&gt; URL: http://localhost:4000/en/Hello-World/</span></span><br><span class="line"></span><br><span class="line">$ hexo new <span class="string">"你好世界"</span> --lang tw</span><br><span class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/tw/你好世界.md</span></span><br><span class="line"><span class="comment"># =&gt; URL: http://localhost:4000/tw/你好世界/</span></span><br></pre></td></tr></table></figure>
<p>You can define the default value of permalink variables in <code>permalink_defaults</code> setting. For example, we define the defualt language as English.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">permalink_defaults:&#10;  lang: en</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can che]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015-12-14 新Hexo博客上线]]></title>
    <link href="https://hexo.io/news/2015/12/14/new-blog-online/"/>
    <id>https://hexo.io/news/2015/12/14/new-blog-online/</id>
    <published>2015-12-14T00:00:00.000Z</published>
    <updated>2015-12-14T14:02:49.146Z</updated>
    <content type="html"><![CDATA[<p>新的Hexo正式上线。<br>在hexo.io的基础上进行修改，删除了英文、繁体中文的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>新的Hexo正式上线。<br>在hexo.io的基础上进行修改，删除了英文、繁体中文的内容。</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo中插入图片]]></title>
    <link href="https://hexo.io/news/2015/12/14/hexo-insert-pic/"/>
    <id>https://hexo.io/news/2015/12/14/hexo-insert-pic/</id>
    <published>2015-12-14T00:00:00.000Z</published>
    <updated>2015-12-14T15:36:33.942Z</updated>
    <content type="html"><![CDATA[<h2 id="u65B9_u5F0F_u4E00"><a href="#u65B9_u5F0F_u4E00" class="headerlink" title="方式一"></a>方式一</h2><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]">
<p>对于hexo，使用本地路径：在/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。</p>
<p>插入时可以修改图片大小。该方式对于 _post 下和其他目录下的MD文件都可以生效。 </p>
<h2 id="u65B9_u5F0F_u4E8C"><a href="#u65B9_u5F0F_u4E8C" class="headerlink" title="方式二"></a>方式二</h2>
<p>Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改 post_asset_folder 字段的设置，将其值改为 true 。</p>
<p>当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。</p>
<p>该方式不知道为什么只对 _post 中的文章生效。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u65B9_u5F0F_u4E00"><a href="#u65B9_u5F0F_u4E00" class="headerlink" title="方式一"></a>方式一</h2><img src="/path/to/image" class="[class n]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决运行hexo命令时提示hexo: command not found的问题]]></title>
    <link href="https://hexo.io/news/2015/12/14/hexo-command-not-found/"/>
    <id>https://hexo.io/news/2015/12/14/hexo-command-not-found/</id>
    <published>2015-12-14T00:00:00.000Z</published>
    <updated>2015-12-14T14:04:10.222Z</updated>
    <content type="html"><![CDATA[<p>hexo已经安装正常，重启系统后再执行hexo，出现”hexo: command not found”的提示<br>执行 node v 提示：<br>The program ‘node’ can be found in the following packages:</p>
<ul>
<li>node</li>
<li>nodejs-legacy<br>Try: sudo apt-get install <selected package=""></selected></li>
</ul>
<p>1、nvm ls<br>   hexo@Hexo:~/site$ nvm ls<br>        v0.12.9<br>         v5.2.0</p>
<p>2、nvm use 5.2.0<br>hexo@Hexo:~/site$ nvm use 5.2.0<br>Now using node v5.2.0 (npm v3.3.12)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo已经安装正常，重启系统后再执行hexo，出现”hexo: command not found”的提示<br>执行 node v 提示：<br>The program ‘node’ can be found in the following packages:</p>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[First]]></title>
    <link href="https://hexo.io/news/2015/12/13/2015-12-13-First/"/>
    <id>https://hexo.io/news/2015/12/13/2015-12-13-First/</id>
    <published>2015-12-13T14:35:41.511Z</published>
    <updated>2015-12-13T14:35:41.495Z</updated>
    <content type="html"><![CDATA[<p>This is my firsy blog.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is my firsy blog.</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 2.7 Released]]></title>
    <link href="https://hexo.io/news/2015/12/13/2014-06-14-hexo-2-7-released/"/>
    <id>https://hexo.io/news/2015/12/13/2014-06-14-hexo-2-7-released/</id>
    <published>2015-12-13T11:09:51.739Z</published>
    <updated>2015-12-13T11:09:51.739Z</updated>
    <content type="html"><![CDATA[<p>Hexo 2.7 has been released with three new features. I’m going to introduce them below.</p>
<h2 id="Fragment_Caching"><a href="#Fragment_Caching" class="headerlink" title="Fragment Caching"></a>Fragment Caching</h2><p>Although Hexo is fast, it may become slow if you have thousands of source files or complicated categories or tags. Before the data model upgraded, I borrowed a feature from Ruby on Rails: <strong>Fragment Caching</strong>.</p>
<p>Fragment Caching saves contents within a fragment and serves the cache when the next request come in. A fragment will only be processed once. It can reduce database queries and decrease generation time significantly. For instance, a Hexo site with 300+ source files needs 6 minutes to generate. In Hexo 2.7, it only need 10 seconds!</p>
<p>It can be used in header, footer, sidebar or static contents that won’t be changed during generating. For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- fragment_cache(<span class="string">'header'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;header&gt;&lt;/header&gt;'</span>;</span><br><span class="line">&#125;); %&gt;</span><br></pre></td></tr></table></figure>
<p>By using <code>fragment_cache</code> helper, contents in the function will be cached.</p>
<p>Partial helper also supports Fragment Caching, you only need to add a <code>{cache: true}</code> option when using partial.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'header'</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;) %&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Landscape</a> is updated and supports Fragment Caching now. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d2aedda61571d6994eb72d784ceda2f59d2a8631" target="_blank" rel="external">this commit</a> to see what’s changed.</p>
<h2 id="Relative_Link"><a href="#Relative_Link" class="headerlink" title="Relative Link"></a>Relative Link</h2><p>Relative Link is supported since Hexo 2.7. But your theme needs some modifications to support it. However, it’s not as hard as you think. You just need to replace the following contents in templates</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- config.root %&gt;<span class="xml"><span class="tag">&lt;<span class="title">%-</span> <span class="attribute">path</span> %&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>with <code>url_for</code> helper.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%- url_for(path) %&gt;</span><br></pre></td></tr></table></figure>
<p><code>url_for</code> helper will add <code>config.root</code> automatically for you. If you enable <code>relative_link</code> setting, it’ll add a relative path.</p>
<p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Landscape</a> is updated for Relative Link. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d29cbb83356373af27e7b98643f29a27804364af" target="_blank" rel="external">this commit</a> to see what’s changed.</p>
<h2 id="Server_Middleware"><a href="#Server_Middleware" class="headerlink" title="Server Middleware"></a>Server Middleware</h2><p>Server Middleware would be familiar if you have ever used <a href="http://www.senchalabs.org/connect/" target="_blank" rel="external">Connect</a> or <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> before. <a href="http://www.senchalabs.org/connect/" target="_blank" rel="external">Connect</a> passes a request through functions called <strong>middleware</strong>. You can make response to the coming in request in middleware.</p>
<p>In Hexo, middleware is served as a type of filter. You can add middleware by registering a new filter. For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.extend.filter.register(<span class="string">'server_middleware'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">  app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">'Hexo'</span>);</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>This middleware add a header <code>X-Powered-By</code> and passes the request to the next middleware.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo 2.7 has been released with three new features. I’m going to introduce them below.</p>
<h2 id="Fragment_Caching"><a href="#Fragment_C]]>
    </summary>
    
  </entry>
  
</feed>
